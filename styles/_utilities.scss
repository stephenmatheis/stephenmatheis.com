@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'styles/themes.module.scss' as themes;

// Globals
$default: themes.$default;
$themes: themes.$themes;
$defaultMode: themes.$defaultMode;
$defaultDarkBackgroundColor: themes.$defaultDarkBackgroundColor;
$defaultLightBackgroundColor: themes.$defaultLightBackgroundColor;
$font-size: 12px;
$line-height: 18px;
$offset: 13px;
$p-line-height-modifier: 1.25;
$page-gap: calc($line-height * 4);
$page-width: 80ch;
$small-width: 500px;
$medium-width: calc($page-width + 12ch);
$max-width: 680px;
$medium-height: 725px;
$border-radius: 6px;
$scroll-margin-top: calc(var(--line-height) * 4);

@mixin page-layout {
    display: flex;
    width: var(--max-width);
    padding: 0.5in;

    @media screen {
        margin: 0 auto;
        padding: calc(var(--line-height) * 2) 6ch;
        width: $page-width;

        @media (max-width: $medium-width) {
            width: 100%;
            align-items: center;
            max-width: var(--max-width);
            gap: calc(var(--line-height) * 4);
        }

        @media (max-width: $small-width) {
            min-width: 100%;
            padding-left: 3ch;
            padding-right: 3ch;
        }
    }
}

@mixin defaultColor($prefix, $variableName, $value, $mode, $options) {
    @if $value {
        --#{$prefix}#{$variableName}: #{$value};
        --toggle-#{$variableName}-string: '#{$value}';
    } @else {
        --#{$prefix}#{$variableName}: #{map.get($options, $mode)};
        --toggle-#{$variableName}-string: '#{map.get($options, $mode)}';
    }
}

@mixin create-theme(
    $type,
    $prefix,
    $mode,
    $primary,
    $accent,
    $token-string-expression,
    $token-function,
    $token-constant,
    $token-comment,
    $background-color: null,
    $text-shadow-color: null,
    $background-color-translucent: null,
    $color: null,
    $muted: null
) {
    $gradients: (
        ('05', 97%),
        ('10', 95%),
        ('15', 92%),
        ('20', 85%),
        ('30', 80%),
        ('50', 50%),
        ('90', 25%)
    );
    $colors: (
        'primary': $primary,
        'token-string-expression': $token-string-expression,
        'token-function': $token-function,
        'token-constant': $token-constant,
        'token-comment': $token-comment,
    );
    $formatted-prefix: if($prefix, #{$prefix}-, '');

    @if $type == null {
        @include defaultColor(
            $formatted-prefix,
            'background-color',
            $background-color,
            $mode,
            (
                'Light': $defaultLightBackgroundColor,
                'Dark': $defaultDarkBackgroundColor,
            )
        );

        @include defaultColor(
            $formatted-prefix,
            'background-color-translucent',
            $background-color-translucent,
            $mode,
            (
                'Light': #{$defaultLightBackgroundColor}cc,
                'Dark': #{$defaultDarkBackgroundColor}cc,
            )
        );

        @each $name, $color in $colors {
            --#{$formatted-prefix}#{$name}: #{$color};
            --#{$formatted-prefix}#{$name}-string: '#{$color}';

            @each $label, $value in $gradients {
                @if $mode == 'Light' {
                    $bg-mix: if(
                        $background-color,
                        $background-color,
                        $defaultLightBackgroundColor
                    );
                    $color-mixed: mix($bg-mix, $color, $value);

                    --#{$formatted-prefix}#{$name}-#{$label}: #{$color-mixed};
                } @else if $mode == 'Dark' {
                    $bg-mix: if(
                        $background-color,
                        $background-color,
                        $defaultDarkBackgroundColor
                    );
                    $color-mixed: mix($bg-mix, $color, $value);

                    --#{$formatted-prefix}#{$name}-#{$label}: #{$color-mixed};
                }
            }
        }

        // Var
        $currentBackgroundColor: null;

        // Code block word highLights
        @if $mode == 'Light' {
            $currentBackgroundColor: $defaultLightBackgroundColor;

            --#{$formatted-prefix}word-background-color: #ffdcc2;
            --#{$formatted-prefix}r-word-background-color: #ffc2d3;
            --#{$formatted-prefix}g-word-background-color: #c2ffce;
            --#{$formatted-prefix}b-word-background-color: #c2efff;
        } @else if $mode == 'Dark' {
            $currentBackgroundColor: $defaultDarkBackgroundColor;

            --#{$formatted-prefix}word-background-color: #63341d;
            --#{$formatted-prefix}r-word-background-color: #9f1239;
            --#{$formatted-prefix}g-word-background-color: #115e59;
            --#{$formatted-prefix}b-word-background-color: #1e40af;
        }

        $bgc: if(
            $background-color != null,
            $background-color,
            $currentBackgroundColor
        );

        // Shades
        --background-color-shade-1: #{mix(black, $bgc, 13%)};
        --background-color-shade-2: #{mix(black, $bgc, 24%)};
        --background-color-shade-3: #{mix(black, $bgc, 37%)};
        --background-color-shade-4: #{mix(black, $bgc, 51%)};
        --background-color-shade-5: #{mix(black, $bgc, 63%)};
        --background-color-shade-6: #{mix(black, $bgc, 75%)};
        --background-color-shade-7: #{mix(black, $bgc, 87%)};

        // Tints
        --background-color-tint-1: #{mix(white, $bgc, 12.5%)};
        --background-color-tint-2: #{mix(white, $bgc, 25%)};
        --background-color-tint-3: #{mix(white, $bgc, 37.5%)};
        --background-color-tint-4: #{mix(white, $bgc, 46%)};
        --background-color-tint-5: #{mix(white, $bgc, 50%)};
        --background-color-tint-6: #{mix(white, $bgc, 62.5%)};
        --background-color-tint-7: #{mix(white, $bgc, 75%)};
        --background-color-tint-8: #{mix(white, $bgc, 87.5%)};

        // Tones
        --background-color-tone-1: #{mix(gray, $bgc, 12.5%)};
        --background-color-tone-2: #{mix(gray, $bgc, 25%)};
        --background-color-tone-3: #{mix(gray, $bgc, 37%)};
        --background-color-tone-4: #{mix(gray, $bgc, 49.5%)};
        --background-color-tone-5: #{mix(gray, $bgc, 62.2%)};
        --background-color-tone-6: #{mix(gray, $bgc, 74.5%)};
        --background-color-tone-7: #{mix(gray, $bgc, 87%)};

        // Backgrounds
        --avatar-background: var(--background-color-tint-8);
        --logo-background: var(--background-color-tint-8);

        // Text
        --muted: #{if($muted != null, $muted, var(--background-color-tint-4))};
        --color: #{if($color != null, $color, var(--background-color-tint-7))};
    }
}

@mixin set-theme($prefix, $mode, $color) {
    @include create-theme(
        $type: null,
        $prefix: $prefix,
        $mode: $mode,
        $primary: map.get($themes, $mode, $color, 'primary'),
        $token-string-expression:
            map.get($themes, $mode, $color, 'token-string-expression'),
        $token-function: map.get($themes, $mode, $color, 'token-function'),
        $token-constant: map.get($themes, $mode, $color, 'token-constant'),
        $token-comment: map.get($themes, $mode, $color, 'token-comment'),
        $accent: map.get($themes, $mode, $color, 'accent'),
        $background-color: map.get($themes, $mode, $color, 'background-color'),
        $color: map.get($themes, $mode, $color, 'color'),
        $muted: map.get($themes, $mode, $color, 'muted')
    );
}

@mixin init-themes() {
    --line-height: #{$line-height};
    --font-size: #{$font-size};
    --offset: #{$offset};
    --p-line-height-modifier: #{$p-line-height-modifier};
    --page-gap: #{$page-gap};
    --small-width: #{$small-width};
    --medium-width: #{$medium-width};
    --max-width: #{$max-width};
    --border-radius: #{$border-radius};
    --icon-size: calc(var(--font-size) + 4px);
    --prefers-color-scheme-transition-speed: 250ms;
    --scroll-margin-top: #{scroll-margin-top};

    @include set-theme(null, $defaultMode, $default);
}
